{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/plots/chord/index.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAElC,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAGvC,OAAO,EAAE,yBAAyB,EAAE,MAAM,aAAa,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAK7C;;GAEG;AACH;IAA2B,yBAAkB;IAA7C;QAAA,qEAyDC;QAjDC,WAAW;QACJ,UAAI,GAAW,OAAO,CAAC;;IAgDhC,CAAC;IAxDC;;;OAGG;IACI,uBAAiB,GAAxB;QACE,OAAO,eAAe,CAAC;IACzB,CAAC;IAID;;;;;;OAMG;IACI,wBAAQ,GAAf,UAAgB,IAAe,EAAE,SAAyB,EAAE,MAAsB;QAAtB,uBAAA,EAAA,aAAsB;QAChF,IAAM,QAAQ,GAAG,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEvD,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAY;YAC1B,IAAI,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE;gBAC5B,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,yBAAS,GAAhB;QACE,IAAM,QAAQ,GAAG,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEvD,IAAM,YAAY,GAAkB,EAAE,CAAC;QACvC,IAAI,CAAC,QAAQ,EAAE,UAAC,OAAgB;YAC9B,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAC/B,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;YACnC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK;gBACjB,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAES,iCAAiB,GAA3B;QACE,OAAO,KAAK,CAAC,iBAAiB,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACO,gCAAgB,GAA1B;QACE,OAAO,OAAO,CAAC;IACjB,CAAC;IACH,YAAC;AAAD,CAAC,AAzDD,CAA2B,IAAI,GAyD9B","sourcesContent":["import { each } from '@antv/util';\nimport { Element } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { StateName, StateCondition, StateObject } from '../../types';\nimport { getAllElementsRecursively } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport { ChordOptions } from './types';\n\nexport type { ChordOptions };\n\n/**\n *  弦图 Chord\n */\nexport class Chord extends Plot<ChordOptions> {\n  /**\n   * 获取 面积图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<ChordOptions> {\n    return DEFAULT_OPTIONS;\n  }\n  /** 图表类型 */\n  public type: string = 'chord';\n\n  /**\n   * @override\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElementsRecursively(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * @override\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElementsRecursively(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n\n  protected getDefaultOptions() {\n    return Chord.getDefaultOptions();\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<ChordOptions> {\n    return adaptor;\n  }\n}\n"]}