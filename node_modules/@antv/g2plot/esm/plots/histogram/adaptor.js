import { __rest } from "tslib";
import { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';
import { findGeometry, deepAssign } from '../../utils';
import { flow, transformLabel } from '../../utils';
import { interval } from '../../adaptor/geometries';
import { binHistogram } from '../../utils/transform/histogram';
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var data = options.data, binField = options.binField, binNumber = options.binNumber, binWidth = options.binWidth, color = options.color, stackField = options.stackField, legend = options.legend, columnStyle = options.columnStyle;
    // 处理数据
    var plotData = binHistogram(data, binField, binWidth, binNumber, stackField);
    chart.data(plotData);
    var p = deepAssign({}, params, {
        options: {
            xField: 'range',
            yField: 'count',
            seriesField: stackField,
            isStack: true,
            interval: {
                color: color,
                style: columnStyle,
            },
        },
    });
    interval(p);
    // 图例
    if (legend && stackField) {
        chart.legend(stackField, legend);
    }
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis;
    return flow(scale({
        range: xAxis,
        count: yAxis,
    }))(params);
}
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis;
    // 为 false 则是不显示轴
    if (xAxis === false) {
        chart.axis('range', false);
    }
    else {
        chart.axis('range', xAxis);
    }
    if (yAxis === false) {
        chart.axis('count', false);
    }
    else {
        chart.axis('count', yAxis);
    }
    return params;
}
/**
 * label 配置
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label;
    var geometry = findGeometry(chart, 'interval');
    if (!label) {
        geometry.label(false);
    }
    else {
        var callback = label.callback, cfg = __rest(label, ["callback"]);
        geometry.label({
            fields: ['count'],
            callback: callback,
            cfg: transformLabel(cfg),
        });
    }
    return params;
}
/**
 * 直方图适配器
 * @param chart
 * @param options
 */
export function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return flow(geometry, meta, axis, theme, state, label, tooltip, interaction, animation)(params);
}
//# sourceMappingURL=adaptor.js.map