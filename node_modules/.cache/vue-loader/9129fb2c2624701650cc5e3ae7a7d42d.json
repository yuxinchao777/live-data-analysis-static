{"remainingRequest":"/Users/momo/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/momo/vue/live-data-analysis-static/src/components/Charts/Pie.vue?vue&type=style&index=0&id=6af60c3c&lang=scss&scoped=true&","dependencies":[{"path":"/Users/momo/vue/live-data-analysis-static/src/components/Charts/Pie.vue","mtime":1626864386249},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucGllLXdyYXBwZXIgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAKICAmLmhhcy1sZWdlbmQgewogICAgLnBpZS1jaGFydCB7CiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDI0MHB4KTsKICAgICAgZm9udC1zaXplOiAyNXB4OwogICAgfQogICAgCiAgICAucGllLWxlZ2VuZCB7CiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgdG9wOiA1MCU7CiAgICAgIHJpZ2h0OiA1MHB4OwogICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7CiAgICAgIG1hcmdpbjogMCAyMHB4OwogICAgICBtaW4td2lkdGg6IDIwMHB4OwogICAgICAKICAgICAgLmxlZ2VuZC1pdGVtIHsKICAgICAgICBoZWlnaHQ6IDIycHg7CiAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgCiAgICAgICAgLmxlZ2VuZC1kb3QgewogICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgdG9wOiAtMXB4OwogICAgICAgICAgd2lkdGg6IDhweDsKICAgICAgICAgIGhlaWdodDogOHB4OwogICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7CiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAubGVnZW5kLXBlcmNlbnQgewogICAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgLjQ1KTsKICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgIHJpZ2h0OiA1cHg7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC5sZWdlbmQtY291bnQgewogICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgbGVmdDogMjAwcHg7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQogIAogICYubGVnZW5kLWJsb2NrIHsKICAgIC5waWUtY2hhcnQgewogICAgICB3aWR0aDogMTAwJTsKICAgICAgbWFyZ2luOiAwIDAgMzJweDsKICAgIH0KICAgIAogICAgLnBpZS1sZWdlbmQgewogICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIHRyYW5zZm9ybTogbm9uZTsKICAgIH0KICB9Cn0KCi5waWUtY2VudGVyLXRpdGxlIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgbGVmdDogNTAlOwogIG1heC1oZWlnaHQ6IDYycHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwogIAogIC5waWUtc3ViLXRpdGxlIHsKICAgIGhlaWdodDogMjJweDsKICAgIGxpbmUtaGVpZ2h0OiAyMnB4OwogICAgbWFyZ2luLWJvdHRvbTogOHB4OwogICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgLjQ1KTsKICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICBmb250LXNpemU6IDE0cHg7CiAgfQp9Cgo="},{"version":3,"sources":["Pie.vue"],"names":[],"mappingsfile":"Pie.vue","sourceRoot":"src/components/Charts","sourcesContent":["<script>\nimport { View } from '@antv/data-set'\nimport { debounce } from '@/utils/optimize'\n\nexport default {\n  props: {\n    height: {\n      type: Number,\n      default: 0\n    },\n    animate: {\n      type: Boolean,\n      default: true\n    },\n    forceFit: {\n      type: Boolean,\n      default: true\n    },\n    selected: {\n      type: Boolean,\n      default: true\n    },\n    tooltip: {\n      type: Boolean,\n      default: true\n    },\n    color: String,\n    colors: Array,\n    margin: {\n      type: Array,\n      default: () => ([])\n    },\n    padding: {\n      type: [Array, String],\n      default: 'auto'\n    },\n    hasLegend: {\n      type: Boolean,\n      default: false\n    },\n    inner: {\n      type: Number,\n      default: 0.75\n    },\n    lineWidth: {\n      type: Number,\n      default: 1\n    },\n    data: Array,\n    percent: Number,\n    title: String,\n    subTitle: String,\n    total: [Function, String],\n    className: String,\n    valueFormat: Function\n  },\n  data () {\n    return {\n      legendData: [],\n      \n      legendBlock: false\n    }\n  },\n  \n  methods: {\n    getLegendData () {\n      if (!this.chart) return\n      const geom = this.chart.getAllGeoms()[0] // 获取所有的图形\n      if (!geom) return\n      \n      const items = geom.get('dataArray') || []\n      \n      const legendData = items.map(item => {\n        const origin = item[0]._origin\n        origin.color = item[0].color\n        origin.checked = true\n        return origin\n      })\n      \n      this.legendData = legendData\n    },\n    onLegendClick (item, i) {\n      const newItem = item\n      newItem.checked = !newItem.checked\n      \n      const { legendData } = this\n      legendData[i] = newItem\n      \n      const filteredLegendData = legendData.filter(l => l.checked).map(l => l.x)\n      \n      if (this.chart) {\n        this.chart.filter('x', val => {\n          return filteredLegendData.indexOf(`${val}`) > -1\n        })\n      }\n      \n      this.legendData = [...legendData]\n    },\n    onResize: debounce(function () {\n      const { hasLegend, legendBlock } = this\n      if (!hasLegend || !this.root) {\n        window.removeEventListener('resize', this.onResize, false)\n        return\n      }\n      if (\n        this.root &&\n        this.root.parentNode &&\n        this.root.parentNode.clientWidth <= 380\n      ) {\n        this.legendBlock = true\n      } else if (legendBlock) {\n        this.legendBlock = false\n      }\n    })\n  },\n  mounted () {\n    if (this.hasLegend) {\n      this.chart = this.$refs.chart.chart.chartInstance\n      this.root = this.$refs.root\n      this.getLegendData()\n      window.addEventListener('resize', this.onResize, false)\n    }\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this.onResize, false)\n  },\n  render () {\n    let {\n      height,\n      forceFit,\n      selected,\n      tooltip,\n      animate,\n      padding,\n      inner,\n      lineWidth,\n      data,\n      subTitle,\n      total,\n      percent,\n      color,\n      colors,\n      hasLegend,\n      legendData,\n      legendBlock\n    } = this\n    \n    const rootClass = ['pie-wrapper', hasLegend && 'has-legend', legendBlock && 'legend-block']\n    \n    let formatColor\n    const defaultColor = colors\n    if (percent || percent === 0) {\n      tooltip = false\n      selected = false\n      \n      formatColor = (value) => {\n        if (value === '占比') {\n          return color || 'rgba(24, 144, 255, 0.85)'\n        }\n        return '#F0F2F5'\n      }\n      \n      data = [\n        {\n          x: '占比',\n          y: parseFloat(`${percent}`)\n        },\n        {\n          x: '反比',\n          y: 100 - parseFloat(`${percent}`)\n        }\n      ]\n    }\n    \n    const scale = [\n      {\n        dataKey: 'x',\n        type: 'cat',\n        range: [0, 1]\n      },\n      {\n        dataKey: 'y',\n        min: 0\n      },\n      {\n        dataKey: 'percent',\n        min: 0,\n        formatter: '.2%'\n      }\n    ]\n    \n    const dv = new View()\n    dv.source(data).transform({\n      type: 'percent',\n      field: 'y',\n      dimension: 'x',\n      as: 'percent'\n    })\n    \n    return (\n      <div ref=\"root\" class={ rootClass }>\n        <div class=\"pie-chart\">\n          <v-chart\n            data={ dv }\n            height={ height }\n            scale={ scale }\n            forceFit={ forceFit }\n            animate={ animate }\n            padding={ padding }\n            ref=\"chart\"\n          >\n            <v-tooltip show={ !!tooltip } showTitle={ false } />\n            <v-axis />\n            <v-pie\n              position=\"percent\"\n              select={ selected }\n              color=\"x\"\n              /* color={ ['x', percent || percent === 0 ? formatColor : defaultColor] } */\n              style={ { lineWidth, stroke: '#fff' } }\n            />\n            <v-coord type=\"theta\" innerRadius={ inner } />\n          </v-chart>\n          { (subTitle || total) && (\n            <div class=\"pie-center-title\">\n              { subTitle && <h4 class=\"pie-sub-title\">{ subTitle }</h4> }\n              { total && <div class=\"pie-stat\">{ typeof total === 'function' ? total() : total }</div> }\n            </div>\n          ) }\n        </div>\n        { hasLegend && (\n          <ul class=\"pie-legend\">\n            {\n              legendData.map((item, idx) => (\n                <li key={ idx }\n                  onClick={ $event => { this.onLegendClick(item, idx) } }\n                  class=\"legend-item\"\n                >\n                  <span style={ { backgroundColor: !item.checked ? '#aaa' : item.color } } class=\"legend-dot\" />\n                  <span>{ item.x }</span>\n                  <a-divider type=\"vertical\" />\n                  <span class=\"legend-percent\">{ (item.percent * 100).toFixed(2) + '%' }</span>\n                   <span class=\"legend-count\">{  item.y }</span>  \n                </li>\n              ))\n            }\n          </ul>\n        ) }\n      </div>\n    )\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n  \n  .pie-wrapper {\n    position: relative;\n    \n    &.has-legend {\n      .pie-chart {\n        position: relative;\n        width: calc(100% - 240px);\n        font-size: 25px;\n      }\n      \n      .pie-legend {\n        position: absolute;\n        top: 50%;\n        right: 50px;\n        transform: translateY(-50%);\n        margin: 0 20px;\n        min-width: 200px;\n        \n        .legend-item {\n          height: 22px;\n          line-height: 22px;\n          margin-bottom: 16px;\n          cursor: pointer;\n          \n          .legend-dot {\n            display: inline-block;\n            position: relative;\n            top: -1px;\n            width: 8px;\n            height: 8px;\n            margin-right: 8px;\n            border-radius: 100%;\n          }\n          \n          .legend-percent {\n            color: rgba(0, 0, 0, .45);\n            position: relative;\n            right: 5px;\n          }\n          \n          .legend-count {\n            position: absolute;\n            left: 200px;\n          }\n        }\n      }\n    }\n    \n    &.legend-block {\n      .pie-chart {\n        width: 100%;\n        margin: 0 0 32px;\n      }\n      \n      .pie-legend {\n        position: relative;\n        transform: none;\n      }\n    }\n  }\n  \n  .pie-center-title {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    max-height: 62px;\n    text-align: center;\n    transform: translate(-50%, -50%);\n    \n    .pie-sub-title {\n      height: 22px;\n      line-height: 22px;\n      margin-bottom: 8px;\n      color: rgba(0, 0, 0, .45);\n      font-weight: 400;\n      font-size: 14px;\n    }\n  }\n\n</style>\n"]}]}