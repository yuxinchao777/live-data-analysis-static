{"remainingRequest":"/Users/momo/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/momo/vue/live-data-analysis-static/src/components/Charts/TagCloud.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/momo/vue/live-data-analysis-static/src/components/Charts/TagCloud.vue","mtime":1626864386250},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHJlZ2lzdGVyU2hhcGUgfSBmcm9tICd2aXNlci12dWUnCmNvbnN0IERhdGFTZXQgPSByZXF1aXJlKCdAYW50di9kYXRhLXNldCcpCgpjb25zdCBpbWdVcmwgPSAnaHR0cHM6Ly9ndy5hbGlwYXlvYmplY3RzLmNvbS96b3Mvcm1zcG9ydGFsL2dXeWVHTENkRkZSYXZCR0lEeldrLnBuZycKCmNvbnN0IHNjYWxlID0gWwogIHsgZGF0YUtleTogJ3gnLCBuaWNlOiBmYWxzZSB9LAogIHsgZGF0YUtleTogJ3knLCBuaWNlOiBmYWxzZSB9Cl0KCnJlZ2lzdGVyU2hhcGUoJ3BvaW50JywgJ2Nsb3VkJywgewogIGRyYXcgKGNmZywgY29udGFpbmVyKSB7CiAgICByZXR1cm4gY29udGFpbmVyLmFkZFNoYXBlKCd0ZXh0JywgewogICAgICBhdHRyczogewogICAgICAgIGZpbGxPcGFjaXR5OiBjZmcub3BhY2l0eSwKICAgICAgICBmb250U2l6ZTogY2ZnLm9yaWdpbi5fb3JpZ2luLnNpemUsCiAgICAgICAgcm90YXRlOiBjZmcub3JpZ2luLl9vcmlnaW4ucm90YXRlLAogICAgICAgIHRleHQ6IGNmZy5vcmlnaW4uX29yaWdpbi50ZXh0LAogICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsCiAgICAgICAgZm9udEZhbWlseTogY2ZnLm9yaWdpbi5fb3JpZ2luLmZvbnQsCiAgICAgICAgZmlsbDogY2ZnLmNvbG9yLAogICAgICAgIHRleHRCYXNlbGluZTogJ0FscGhhYmV0aWMnLAogICAgICAgIC4uLmNmZy5zdHlsZSwKICAgICAgICB4OiBjZmcueCwKICAgICAgICB5OiBjZmcueQogICAgICB9CiAgICB9KQogIH0KfSkKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVGFnQ2xvdWQnLAogIHByb3BzOiB7CiAgICB0YWdMaXN0OiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGhlaWdodDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDQwMAogICAgfSwKICAgIHdpZHRoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogNjQwCiAgICB9CiAgfSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIGRhdGE6IFtdLAogICAgICBzY2FsZQogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIHRhZ0xpc3Q6IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgaWYgKHZhbC5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5pbml0VGFnQ2xvdWQodmFsKQogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkICgpIHsKICAgIGlmICh0aGlzLnRhZ0xpc3QubGVuZ3RoID4gMCkgewogICAgICB0aGlzLmluaXRUYWdDbG91ZCh0aGlzLnRhZ0xpc3QpCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0VGFnQ2xvdWQgKGRhdGFTb3VyY2UpIHsKICAgICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSB0aGlzCgogICAgICBjb25zdCBkdiA9IG5ldyBEYXRhU2V0LlZpZXcoKS5zb3VyY2UoZGF0YVNvdXJjZSkKICAgICAgY29uc3QgcmFuZ2UgPSBkdi5yYW5nZSgndmFsdWUnKQogICAgICBjb25zdCBtaW4gPSByYW5nZVswXQogICAgICBjb25zdCBtYXggPSByYW5nZVsxXQogICAgICBjb25zdCBpbWFnZU1hc2sgPSBuZXcgSW1hZ2UoKQogICAgICBpbWFnZU1hc2suY3Jvc3NPcmlnaW4gPSAnJwogICAgICBpbWFnZU1hc2suc3JjID0gaW1nVXJsCiAgICAgIGltYWdlTWFzay5vbmxvYWQgPSAoKSA9PiB7CiAgICAgICAgZHYudHJhbnNmb3JtKHsKICAgICAgICAgIHR5cGU6ICd0YWctY2xvdWQnLAogICAgICAgICAgZmllbGRzOiBbJ25hbWUnLCAndmFsdWUnXSwKICAgICAgICAgIHNpemU6IFt3aWR0aCwgaGVpZ2h0XSwKICAgICAgICAgIGltYWdlTWFzaywKICAgICAgICAgIGZvbnQ6ICdWZXJkYW5hJywKICAgICAgICAgIHBhZGRpbmc6IDAsCiAgICAgICAgICB0aW1lSW50ZXJ2YWw6IDUwMDAsIC8vIG1heCBleGVjdXRlIHRpbWUKICAgICAgICAgIHJvdGF0ZSAoKSB7CiAgICAgICAgICAgIGxldCByYW5kb20gPSB+fihNYXRoLnJhbmRvbSgpICogNCkgJSA0CiAgICAgICAgICAgIGlmIChyYW5kb20gPT09IDIpIHsKICAgICAgICAgICAgICByYW5kb20gPSAwCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJhbmRvbSAqIDkwIC8vIDAsIDkwLCAyNzAKICAgICAgICAgIH0sCiAgICAgICAgICBmb250U2l6ZSAoZCkgewogICAgICAgICAgICBpZiAoZC52YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiAoKGQudmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbikpICogKDMyIC0gOCkgKyA4CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIHRoaXMuZGF0YSA9IGR2LnJvd3MKICAgICAgfQogICAgfQogIH0KfQo="},{"version":3,"sources":["TagCloud.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TagCloud.vue","sourceRoot":"src/components/Charts","sourcesContent":["<template>\n  <v-chart :width=\"width\" :height=\"height\" :padding=\"[0]\" :data=\"data\" :scale=\"scale\">\n    <v-tooltip :show-title=\"false\" />\n    <v-coord type=\"rect\" direction=\"TL\" />\n    <v-point position=\"x*y\" color=\"category\" shape=\"cloud\" tooltip=\"value*category\" />\n  </v-chart>\n</template>\n\n<script>\nimport { registerShape } from 'viser-vue'\nconst DataSet = require('@antv/data-set')\n\nconst imgUrl = 'https://gw.alipayobjects.com/zos/rmsportal/gWyeGLCdFFRavBGIDzWk.png'\n\nconst scale = [\n  { dataKey: 'x', nice: false },\n  { dataKey: 'y', nice: false }\n]\n\nregisterShape('point', 'cloud', {\n  draw (cfg, container) {\n    return container.addShape('text', {\n      attrs: {\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n        ...cfg.style,\n        x: cfg.x,\n        y: cfg.y\n      }\n    })\n  }\n})\n\nexport default {\n  name: 'TagCloud',\n  props: {\n    tagList: {\n      type: Array,\n      required: true\n    },\n    height: {\n      type: Number,\n      default: 400\n    },\n    width: {\n      type: Number,\n      default: 640\n    }\n  },\n  data () {\n    return {\n      data: [],\n      scale\n    }\n  },\n  watch: {\n    tagList: function (val) {\n      if (val.length > 0) {\n        this.initTagCloud(val)\n      }\n    }\n  },\n  mounted () {\n    if (this.tagList.length > 0) {\n      this.initTagCloud(this.tagList)\n    }\n  },\n  methods: {\n    initTagCloud (dataSource) {\n      const { height, width } = this\n\n      const dv = new DataSet.View().source(dataSource)\n      const range = dv.range('value')\n      const min = range[0]\n      const max = range[1]\n      const imageMask = new Image()\n      imageMask.crossOrigin = ''\n      imageMask.src = imgUrl\n      imageMask.onload = () => {\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          size: [width, height],\n          imageMask,\n          font: 'Verdana',\n          padding: 0,\n          timeInterval: 5000, // max execute time\n          rotate () {\n            let random = ~~(Math.random() * 4) % 4\n            if (random === 2) {\n              random = 0\n            }\n            return random * 90 // 0, 90, 270\n          },\n          fontSize (d) {\n            if (d.value) {\n              return ((d.value - min) / (max - min)) * (32 - 8) + 8\n            }\n            return 0\n          }\n        })\n        this.data = dv.rows\n      }\n    }\n  }\n}\n</script>\n"]}]}