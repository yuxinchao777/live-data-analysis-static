{"remainingRequest":"/Users/momo/code/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/momo/code/vue/live-data-analysis-static/src/components/Ellipsis/Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/momo/code/vue/live-data-analysis-static/src/components/Ellipsis/Ellipsis.vue","mtime":1626864386000},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":1647586199048},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js","mtime":1647848746451},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":1647586199048},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js","mtime":1647848754116}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBUb29sdGlwIGZyb20gJ2FudC1kZXNpZ24tdnVlL2VzL3Rvb2x0aXAnCmltcG9ydCB7IGN1dFN0ckJ5RnVsbExlbmd0aCwgZ2V0U3RyRnVsbExlbmd0aCB9IGZyb20gJ0AvY29tcG9uZW50cy9fdXRpbC91dGlsJwovKgogICAgY29uc3QgaXNTdXBwb3J0TGluZUNsYW1wID0gZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRMaW5lQ2xhbXAgIT09IHVuZGVmaW5lZDsKCiAgICBjb25zdCBUb29sdGlwT3ZlcmxheVN0eWxlID0gewogICAgICBvdmVyZmxvd1dyYXA6ICdicmVhay13b3JkJywKICAgICAgd29yZFdyYXA6ICdicmVhay13b3JkJywKICAgIH07CiAgKi8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRWxsaXBzaXMnLAogIGNvbXBvbmVudHM6IHsKICAgIFRvb2x0aXAKICB9LAogIHByb3BzOiB7CiAgICBwcmVmaXhDbHM6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnYW50LXByby1lbGxpcHNpcycKICAgIH0sCiAgICB0b29sdGlwOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4KICAgIH0sCiAgICBsZW5ndGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGxpbmVzOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMQogICAgfSwKICAgIGZ1bGxXaWR0aFJlY29nbml0aW9uOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRTdHJEb20gKHN0ciwgZnVsbExlbmd0aCkgewogICAgICByZXR1cm4gKAogICAgICAgIDxzcGFuPnsgY3V0U3RyQnlGdWxsTGVuZ3RoKHN0ciwgdGhpcy5sZW5ndGgpICsgKGZ1bGxMZW5ndGggPiB0aGlzLmxlbmd0aCA/ICcuLi4nIDogJycpIH08L3NwYW4+CiAgICAgICkKICAgIH0sCiAgICBnZXRUb29sdGlwIChmdWxsU3RyLCBmdWxsTGVuZ3RoKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgPFRvb2x0aXA+CiAgICAgICAgICA8dGVtcGxhdGUgc2xvdD0idGl0bGUiPnsgZnVsbFN0ciB9PC90ZW1wbGF0ZT4KICAgICAgICAgIHsgdGhpcy5nZXRTdHJEb20oZnVsbFN0ciwgZnVsbExlbmd0aCkgfQogICAgICAgIDwvVG9vbHRpcD4KICAgICAgKQogICAgfQogIH0sCiAgcmVuZGVyICgpIHsKICAgIGNvbnN0IHsgdG9vbHRpcCwgbGVuZ3RoIH0gPSB0aGlzLiRwcm9wcwogICAgY29uc3Qgc3RyID0gdGhpcy4kc2xvdHMuZGVmYXVsdC5tYXAodk5vZGUgPT4gdk5vZGUudGV4dCkuam9pbignJykKICAgIGNvbnN0IGZ1bGxMZW5ndGggPSBnZXRTdHJGdWxsTGVuZ3RoKHN0cikKICAgIGNvbnN0IHN0ckRvbSA9IHRvb2x0aXAgJiYgZnVsbExlbmd0aCA+IGxlbmd0aCA/IHRoaXMuZ2V0VG9vbHRpcChzdHIsIGZ1bGxMZW5ndGgpIDogdGhpcy5nZXRTdHJEb20oc3RyLCBmdWxsTGVuZ3RoKQogICAgcmV0dXJuICgKICAgICAgc3RyRG9tCiAgICApCiAgfQp9Cg=="},{"version":3,"sources":["Ellipsis.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Ellipsis.vue","sourceRoot":"src/components/Ellipsis","sourcesContent":["<script>\nimport Tooltip from 'ant-design-vue/es/tooltip'\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util'\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom (str, fullLength) {\n      return (\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\n      )\n    },\n    getTooltip (fullStr, fullLength) {\n      return (\n        <Tooltip>\n          <template slot=\"title\">{ fullStr }</template>\n          { this.getStrDom(fullStr, fullLength) }\n        </Tooltip>\n      )\n    }\n  },\n  render () {\n    const { tooltip, length } = this.$props\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\n    const fullLength = getStrFullLength(str)\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\n    return (\n      strDom\n    )\n  }\n}\n</script>\n"]}]}