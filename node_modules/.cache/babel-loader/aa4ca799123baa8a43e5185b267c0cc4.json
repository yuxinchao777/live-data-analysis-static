{"remainingRequest":"/Users/momo/vue/live-data-analysis-static/node_modules/thread-loader/dist/cjs.js!/Users/momo/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js!/Users/momo/vue/live-data-analysis-static/src/config/router.config.js","dependencies":[{"path":"/Users/momo/vue/live-data-analysis-static/src/config/router.config.js","mtime":1646988181371},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":1626939577620},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/thread-loader/dist/cjs.js","mtime":1626939577640},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js","mtime":1640003217818}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQppbXBvcnQgeyBVc2VyTGF5b3V0LCBCYXNpY0xheW91dCwgQmxhbmtMYXlvdXQgfSBmcm9tICdAL2xheW91dHMnOwppbXBvcnQgeyBieEFuYWFseXNlIH0gZnJvbSAnQC9jb3JlL2ljb25zJzsKdmFyIFJvdXRlVmlldyA9IHsKICBuYW1lOiAnUm91dGVWaWV3JywKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7CiAgICByZXR1cm4gaCgncm91dGVyLXZpZXcnKTsKICB9Cn07CmV4cG9ydCB2YXIgYXN5bmNSb3V0ZXJNYXAgPSBbewogIHBhdGg6ICcvJywKICBuYW1lOiAnaW5kZXgnLAogIGNvbXBvbmVudDogQmFzaWNMYXlvdXQsCiAgbWV0YTogewogICAgdGl0bGU6ICdtZW51LmhvbWUnCiAgfSwKICByZWRpcmVjdDogJy9kYXNoYm9hcmQvcWFkYXRhJywKICAvL3JlZGlyZWN0OiBub3JlZGlyZWN0LAogIGNoaWxkcmVuOiBbLy8gZGFzaGJvYXJkCiAgewogICAgcGF0aDogJy9kYXNoYm9hcmQnLAogICAgbmFtZTogJ2Rhc2hib2FyZCcsCiAgICByZWRpcmVjdDogJy9kYXNoYm9hcmQvcWFkYXRhJywKICAgIC8vcmVkaXJlY3Q6IG5vcmVkaXJlY3QsCiAgICBjb21wb25lbnQ6IFJvdXRlVmlldywKICAgIG1ldGE6IHsKICAgICAgdGl0bGU6ICfoj5zljZUnLAogICAgICBpY29uOiBieEFuYWFseXNlLAogICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgIH0sCiAgICBjaGlsZHJlbjogW3sKICAgICAgcGF0aDogJy9kYXNoYm9hcmQvYW5hbHlzaXMnLAogICAgICBuYW1lOiAnQW5hbHlzaXMnLAogICAgICBoaWRkZW46IHRydWUsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvZGFzaGJvYXJkL0J1c2luZXNzQW5hbHlzaXMnKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAn5Lia5YqhJywKICAgICAgICBrZWVwQWxpdmU6IHRydWUsCiAgICAgICAgcGVybWlzc2lvbjogWydhbmFseXNpcyddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9kYXNoYm9hcmQvbWVtYmVyJywKICAgICAgbmFtZTogJ01lbWJlcicsCiAgICAgIGhpZGRlbjogdHJ1ZSwKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9kYXNoYm9hcmQvTWVtYmVyJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJ+S6uuWRmCcsCiAgICAgICAga2VlcEFsaXZlOiB0cnVlLAogICAgICAgIHBlcm1pc3Npb246IFsnbWVtYmVyJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC92aXBvcmRlcicsCiAgICAgIG5hbWU6ICdWaXBPcmRlcicsCiAgICAgIGhpZGRlbjogdHJ1ZSwKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9kYXNoYm9hcmQvVmlwT3JkZXInKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAn6Zeu6aKY6Lef6L+bJywKICAgICAgICBrZWVwQWxpdmU6IHRydWUsCiAgICAgICAgcGVybWlzc2lvbjogWydhbmFseXNpcyddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9kYXNoYm9hcmQvcXVhbGl0eWRldGFpbCcsCiAgICAgIG5hbWU6ICdxdWFsaXR5ZGV0YWlsJywKICAgICAgaGlkZGVuOiB0cnVlLAogICAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL2Rhc2hib2FyZC9RdWFsaXR5RGV0YWlsJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJ+i0qOmHj+ivpue7huaVsOaNricsCiAgICAgICAga2VlcEFsaXZlOiB0cnVlLAogICAgICAgIHBlcm1pc3Npb246IFsnYW5hbHlzaXMnXQogICAgICB9CiAgICB9LCB7CiAgICAgIHBhdGg6ICcvZGFzaGJvYXJkL3Byb2plY3RkZXRhaWwnLAogICAgICBuYW1lOiAncHJvamVjdGRldGFpbCcsCiAgICAgIGhpZGRlbjogdHJ1ZSwKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9kYXNoYm9hcmQvUHJvamVjdERldGFpbCcpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICfkuJrliqHor6bnu4bmlbDmja4nLAogICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSwKICAgICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC9xYWRhdGEnLAogICAgICBuYW1lOiAncWFkYXRhJywKICAgICAgLy8gaGlkZGVuOiB0cnVlLAogICAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL3FhZGF0YS9xYWRhdGEnKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAn5ZWG5LiaUUHmlbDmja7nu5/orqEnLAogICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSwKICAgICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC9xYW1lbWJlcmRhdGEnLAogICAgICBuYW1lOiAncWFtZW1iZXJkYXRhJywKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9xYWRhdGEvcWFtZW1iZXJkYXRhJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJ+WVhuS4mlFB5o6S5pyf5oOF5Ya1JywKICAgICAgICBrZWVwQWxpdmU6IHRydWUsCiAgICAgICAgcGVybWlzc2lvbjogWydhbmFseXNpcyddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9kYXNoYm9hcmQvcWFtZW1iZXInLAogICAgICBuYW1lOiAncWFtZW1iZXInLAogICAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL3FhZGF0YS9xYW1lbWJlcicpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICfllYbkuJpRQeS6uuWRmOmFjee9ricsCiAgICAgICAga2VlcEFsaXZlOiB0cnVlLAogICAgICAgIHBlcm1pc3Npb246IFsnYW5hbHlzaXMnXQogICAgICB9CiAgICB9LCB7CiAgICAgIHBhdGg6ICcvZGFzaGJvYXJkL2NvZGVudW1iZXInLAogICAgICBuYW1lOiAnY29kZW51bWJlcicsCiAgICAgIGhpZGRlbjogdHJ1ZSwKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9xYWRhdGEvY29kZW51bWJlcicpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICfku6PnoIHph4/nu5/orqEnLAogICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSwKICAgICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC90ZXN0MDAxJywKICAgICAgbmFtZTogJ3Rlc3QwMDEnLAogICAgICBoaWRkZW46IHRydWUsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvcWFkYXRhL3Rlc3QwMDEnKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAndGVzdDAwMScsCiAgICAgICAga2VlcEFsaXZlOiB0cnVlLAogICAgICAgIHBlcm1pc3Npb246IFsnYW5hbHlzaXMnXQogICAgICB9CiAgICB9XQogIH0sIC8vIGZvcm1zCgogIC8qICAgICAgIHsKICAgICAgICAgIHBhdGg6ICcvZm9ybScsCiAgICAgICAgICByZWRpcmVjdDogJy9mb3JtL2Jhc2UtZm9ybScsCiAgICAgICAgICBjb21wb25lbnQ6IFJvdXRlVmlldywKICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfooajljZXpobUnLCBpY29uOiAnZm9ybScsIHBlcm1pc3Npb246IFsgJ2Zvcm0nIF0gfSwKICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2Zvcm0vYmFzZS1mb3JtJywKICAgICAgICAgICAgICBuYW1lOiAnQmFzZUZvcm0nLAogICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2Zvcm0vYmFzaWNGb3JtJyksCiAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WfuuehgOihqOWNlScsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAnZm9ybScgXSB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2Zvcm0vc3RlcC1mb3JtJywKICAgICAgICAgICAgICBuYW1lOiAnU3RlcEZvcm0nLAogICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2Zvcm0vc3RlcEZvcm0vU3RlcEZvcm0nKSwKICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5YiG5q2l6KGo5Y2VJywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICdmb3JtJyBdIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvZm9ybS9hZHZhbmNlZC1mb3JtJywKICAgICAgICAgICAgICBuYW1lOiAnQWR2YW5jZUZvcm0nLAogICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2Zvcm0vYWR2YW5jZWRGb3JtL0FkdmFuY2VkRm9ybScpLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfpq5jnuqfooajljZUnLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ2Zvcm0nIF0gfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwgKi8KICAvLyBsaXN0CgogIC8qICAgICAgIHsKICAgICAgICAgIHBhdGg6ICcvbGlzdCcsCiAgICAgICAgICBuYW1lOiAnbGlzdCcsCiAgICAgICAgICBjb21wb25lbnQ6IFJvdXRlVmlldywKICAgICAgICAgIHJlZGlyZWN0OiAnL2xpc3QvdGFibGUtbGlzdCcsCiAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5YiX6KGo6aG1JywgaWNvbjogJ3RhYmxlJywgcGVybWlzc2lvbjogWyAndGFibGUnIF0gfSwKICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2xpc3QvdGFibGUtbGlzdC86cGFnZU5vKFsxLTldXFxkKik/JywKICAgICAgICAgICAgICBuYW1lOiAnVGFibGVMaXN0V3JhcHBlcicsCiAgICAgICAgICAgICAgaGlkZUNoaWxkcmVuSW5NZW51OiB0cnVlLCAvLyDlvLrliLbmmL7npLogTWVudUl0ZW0g6ICM5LiN5pivIFN1Yk1lbnUKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9saXN0L1RhYmxlTGlzdCcpLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmn6Xor6LooajmoLwnLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ3RhYmxlJyBdIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvbGlzdC9iYXNpYy1saXN0JywKICAgICAgICAgICAgICBuYW1lOiAnQmFzaWNMaXN0JywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9saXN0L0Jhc2ljTGlzdCcpLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmoIflh4bliJfooagnLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ3RhYmxlJyBdIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvbGlzdC9jYXJkJywKICAgICAgICAgICAgICBuYW1lOiAnQ2FyZExpc3QnLAogICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2xpc3QvQ2FyZExpc3QnKSwKICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5Y2h54mH5YiX6KGoJywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd0YWJsZScgXSB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2xpc3Qvc2VhcmNoJywKICAgICAgICAgICAgICBuYW1lOiAnU2VhcmNoTGlzdCcsCiAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvbGlzdC9zZWFyY2gvU2VhcmNoTGF5b3V0JyksCiAgICAgICAgICAgICAgcmVkaXJlY3Q6ICcvbGlzdC9zZWFyY2gvYXJ0aWNsZScsCiAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+aQnOe0ouWIl+ihqCcsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAndGFibGUnIF0gfSwKICAgICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBwYXRoOiAnL2xpc3Qvc2VhcmNoL2FydGljbGUnLAogICAgICAgICAgICAgICAgICBuYW1lOiAnU2VhcmNoQXJ0aWNsZXMnLAogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnLi4vdmlld3MvbGlzdC9zZWFyY2gvQXJ0aWNsZScpLAogICAgICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5pCc57Si5YiX6KGo77yI5paH56ug77yJJywgcGVybWlzc2lvbjogWyAndGFibGUnIF0gfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcGF0aDogJy9saXN0L3NlYXJjaC9wcm9qZWN0JywKICAgICAgICAgICAgICAgICAgbmFtZTogJ1NlYXJjaFByb2plY3RzJywKICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJy4uL3ZpZXdzL2xpc3Qvc2VhcmNoL1Byb2plY3RzJyksCiAgICAgICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmkJzntKLliJfooajvvIjpobnnm67vvIknLCBwZXJtaXNzaW9uOiBbICd0YWJsZScgXSB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBwYXRoOiAnL2xpc3Qvc2VhcmNoL2FwcGxpY2F0aW9uJywKICAgICAgICAgICAgICAgICAgbmFtZTogJ1NlYXJjaEFwcGxpY2F0aW9ucycsCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCcuLi92aWV3cy9saXN0L3NlYXJjaC9BcHBsaWNhdGlvbnMnKSwKICAgICAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+aQnOe0ouWIl+ihqO+8iOW6lOeUqO+8iScsIHBlcm1pc3Npb246IFsgJ3RhYmxlJyBdIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LCAqLwogIC8vIHByb2ZpbGUKCiAgLyogICAgICAgewogICAgICAgICAgcGF0aDogJy9wcm9maWxlJywKICAgICAgICAgIG5hbWU6ICdwcm9maWxlJywKICAgICAgICAgIGNvbXBvbmVudDogUm91dGVWaWV3LAogICAgICAgICAgcmVkaXJlY3Q6ICcvcHJvZmlsZS9iYXNpYycsCiAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn6K+m5oOF6aG1JywgaWNvbjogJ3Byb2ZpbGUnLCBwZXJtaXNzaW9uOiBbICdwcm9maWxlJyBdIH0sCiAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9wcm9maWxlL2Jhc2ljJywKICAgICAgICAgICAgICBuYW1lOiAnUHJvZmlsZUJhc2ljJywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9wcm9maWxlL2Jhc2ljJyksCiAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WfuuehgOivpuaDhemhtScsIHBlcm1pc3Npb246IFsgJ3Byb2ZpbGUnIF0gfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9wcm9maWxlL2FkdmFuY2VkJywKICAgICAgICAgICAgICBuYW1lOiAnUHJvZmlsZUFkdmFuY2VkJywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9wcm9maWxlL2FkdmFuY2VkL0FkdmFuY2VkJyksCiAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+mrmOe6p+ivpuaDhemhtScsIHBlcm1pc3Npb246IFsgJ3Byb2ZpbGUnIF0gfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAKICAgICAgICAvLyByZXN1bHQKICAvKiAgICAgICB7CiAgICAgICAgICBwYXRoOiAnL3Jlc3VsdCcsCiAgICAgICAgICBuYW1lOiAncmVzdWx0JywKICAgICAgICAgIGNvbXBvbmVudDogUm91dGVWaWV3LAogICAgICAgICAgcmVkaXJlY3Q6ICcvcmVzdWx0L3N1Y2Nlc3MnLAogICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+e7k+aenOmhtScsIGljb246ICdjaGVjay1jaXJjbGUtbycsIHBlcm1pc3Npb246IFsgJ3Jlc3VsdCcgXSB9LAogICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvcmVzdWx0L3N1Y2Nlc3MnLAogICAgICAgICAgICAgIG5hbWU6ICdSZXN1bHRTdWNjZXNzJywgKi8KICAvLyAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6ICJyZXN1bHQiICovICdAL3ZpZXdzL3Jlc3VsdC9TdWNjZXNzJyksCgogIC8qICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmiJDlip8nLCBrZWVwQWxpdmU6IGZhbHNlLCBoaWRkZW5IZWFkZXJDb250ZW50OiB0cnVlLCBwZXJtaXNzaW9uOiBbICdyZXN1bHQnIF0gfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9yZXN1bHQvZmFpbCcsCiAgICAgICAgICAgICAgbmFtZTogJ1Jlc3VsdEZhaWwnLCAqLwogIC8vICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoLyogd2VicGFja0NodW5rTmFtZTogInJlc3VsdCIgKi8gJ0Avdmlld3MvcmVzdWx0L0Vycm9yJyksCgogIC8qICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICflpLHotKUnLCBrZWVwQWxpdmU6IGZhbHNlLCBoaWRkZW5IZWFkZXJDb250ZW50OiB0cnVlLCBwZXJtaXNzaW9uOiBbICdyZXN1bHQnIF0gfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwgKi8KICAvLyBFeGNlcHRpb24KICB7CiAgICBwYXRoOiAnL2V4Y2VwdGlvbicsCiAgICBuYW1lOiAnZXhjZXB0aW9uJywKICAgIGNvbXBvbmVudDogUm91dGVWaWV3LAogICAgcmVkaXJlY3Q6ICcvZXhjZXB0aW9uLzQwMycsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAn5byC5bi46aG1JywKICAgICAgaWNvbjogJ3dhcm5pbmcnLAogICAgICBwZXJtaXNzaW9uOiBbJ2V4Y2VwdGlvbiddCiAgICB9LAogICAgY2hpbGRyZW46IFt7CiAgICAgIHBhdGg6ICcvZXhjZXB0aW9uLzQwMycsCiAgICAgIG5hbWU6ICdFeGNlcHRpb240MDMnLAogICAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgICByZXR1cm4gaW1wb3J0KAogICAgICAgIC8qIHdlYnBhY2tDaHVua05hbWU6ICJmYWlsIiAqLwogICAgICAgICdAL3ZpZXdzL2V4Y2VwdGlvbi80MDMnKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAnNDAzJywKICAgICAgICBwZXJtaXNzaW9uOiBbJ2V4Y2VwdGlvbiddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9leGNlcHRpb24vNDA0JywKICAgICAgbmFtZTogJ0V4Y2VwdGlvbjQwNCcsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoCiAgICAgICAgLyogd2VicGFja0NodW5rTmFtZTogImZhaWwiICovCiAgICAgICAgJ0Avdmlld3MvZXhjZXB0aW9uLzQwNCcpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICc0MDQnLAogICAgICAgIHBlcm1pc3Npb246IFsnZXhjZXB0aW9uJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2V4Y2VwdGlvbi81MDAnLAogICAgICBuYW1lOiAnRXhjZXB0aW9uNTAwJywKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgKICAgICAgICAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAiZmFpbCIgKi8KICAgICAgICAnQC92aWV3cy9leGNlcHRpb24vNTAwJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJzUwMCcsCiAgICAgICAgcGVybWlzc2lvbjogWydleGNlcHRpb24nXQogICAgICB9CiAgICB9XQogIH0gLy8gYWNjb3VudAoKICAvKiAgICAgICB7CiAgICAgICAgICBwYXRoOiAnL2FjY291bnQnLAogICAgICAgICAgY29tcG9uZW50OiBSb3V0ZVZpZXcsCiAgICAgICAgICByZWRpcmVjdDogJy9hY2NvdW50L2NlbnRlcicsCiAgICAgICAgICBuYW1lOiAnYWNjb3VudCcsCiAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5Liq5Lq66aG1JywgaWNvbjogJ3VzZXInLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ3VzZXInIF0gfSwKICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2FjY291bnQvY2VudGVyJywKICAgICAgICAgICAgICBuYW1lOiAnY2VudGVyJywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9hY2NvdW50L2NlbnRlcicpLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfkuKrkurrkuK3lv4MnLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ3VzZXInIF0gfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9hY2NvdW50L3NldHRpbmdzJywKICAgICAgICAgICAgICBuYW1lOiAnc2V0dGluZ3MnLAogICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2FjY291bnQvc2V0dGluZ3MvSW5kZXgnKSwKICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5Liq5Lq66K6+572uJywgaGlkZUhlYWRlcjogdHJ1ZSwgcGVybWlzc2lvbjogWyAndXNlcicgXSB9LAogICAgICAgICAgICAgIHJlZGlyZWN0OiAnL2FjY291bnQvc2V0dGluZ3MvYmFzZScsCiAgICAgICAgICAgICAgaGlkZUNoaWxkcmVuSW5NZW51OiB0cnVlLAogICAgICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHBhdGg6ICcvYWNjb3VudC9zZXR0aW5ncy9iYXNlJywKICAgICAgICAgICAgICAgICAgbmFtZTogJ0Jhc2VTZXR0aW5ncycsCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2FjY291bnQvc2V0dGluZ3MvQmFzZVNldHRpbmcnKSwKICAgICAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WfuuacrOiuvue9ricsIGhpZGRlbjogdHJ1ZSwgcGVybWlzc2lvbjogWyAndXNlcicgXSB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBwYXRoOiAnL2FjY291bnQvc2V0dGluZ3Mvc2VjdXJpdHknLAogICAgICAgICAgICAgICAgICBuYW1lOiAnU2VjdXJpdHlTZXR0aW5ncycsCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2FjY291bnQvc2V0dGluZ3MvU2VjdXJpdHknKSwKICAgICAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WuieWFqOiuvue9ricsIGhpZGRlbjogdHJ1ZSwga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd1c2VyJyBdIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHBhdGg6ICcvYWNjb3VudC9zZXR0aW5ncy9jdXN0b20nLAogICAgICAgICAgICAgICAgICBuYW1lOiAnQ3VzdG9tU2V0dGluZ3MnLAogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9hY2NvdW50L3NldHRpbmdzL0N1c3RvbScpLAogICAgICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5Liq5oCn5YyW6K6+572uJywgaGlkZGVuOiB0cnVlLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ3VzZXInIF0gfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcGF0aDogJy9hY2NvdW50L3NldHRpbmdzL2JpbmRpbmcnLAogICAgICAgICAgICAgICAgICBuYW1lOiAnQmluZGluZ1NldHRpbmdzJywKICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvYWNjb3VudC9zZXR0aW5ncy9CaW5kaW5nJyksCiAgICAgICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfotKbmiLfnu5HlrponLCBoaWRkZW46IHRydWUsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAndXNlcicgXSB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBwYXRoOiAnL2FjY291bnQvc2V0dGluZ3Mvbm90aWZpY2F0aW9uJywKICAgICAgICAgICAgICAgICAgbmFtZTogJ05vdGlmaWNhdGlvblNldHRpbmdzJywKICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvYWNjb3VudC9zZXR0aW5ncy9Ob3RpZmljYXRpb24nKSwKICAgICAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+aWsOa2iOaBr+mAmuefpScsIGhpZGRlbjogdHJ1ZSwga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd1c2VyJyBdIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9ICovCiAgLy8gb3RoZXIKCiAgLyoKICB7CiAgICBwYXRoOiAnL290aGVyJywKICAgIG5hbWU6ICdvdGhlclBhZ2UnLAogICAgY29tcG9uZW50OiBQYWdlVmlldywKICAgIG1ldGE6IHsgdGl0bGU6ICflhbbku5bnu4Tku7YnLCBpY29uOiAnc2xhY2snLCBwZXJtaXNzaW9uOiBbICdkYXNoYm9hcmQnIF0gfSwKICAgIHJlZGlyZWN0OiAnL290aGVyL2ljb24tc2VsZWN0b3InLAogICAgY2hpbGRyZW46IFsKICAgICAgewogICAgICAgIHBhdGg6ICcvb3RoZXIvaWNvbi1zZWxlY3RvcicsCiAgICAgICAgbmFtZTogJ1Rlc3RJY29uU2VsZWN0JywKICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9vdGhlci9JY29uU2VsZWN0b3JWaWV3JyksCiAgICAgICAgbWV0YTogeyB0aXRsZTogJ0ljb25TZWxlY3RvcicsIGljb246ICd0b29sJywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICdkYXNoYm9hcmQnIF0gfQogICAgICB9LAogICAgICB7CiAgICAgICAgcGF0aDogJy9vdGhlci9saXN0JywKICAgICAgICBjb21wb25lbnQ6IFJvdXRlVmlldywKICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5Lia5Yqh5biD5bGAJywgaWNvbjogJ2xheW91dCcsIHBlcm1pc3Npb246IFsgJ3N1cHBvcnQnIF0gfSwKICAgICAgICByZWRpcmVjdDogJy9vdGhlci9saXN0L3RyZWUtbGlzdCcsCiAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgIHsKICAgICAgICAgICAgcGF0aDogJy9vdGhlci9saXN0L3RyZWUtbGlzdCcsCiAgICAgICAgICAgIG5hbWU6ICdUcmVlTGlzdCcsCiAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL290aGVyL1RyZWVMaXN0JyksCiAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmoJHnm67lvZXooajmoLwnLCBrZWVwQWxpdmU6IHRydWUgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgcGF0aDogJy9vdGhlci9saXN0L2VkaXQtdGFibGUnLAogICAgICAgICAgICBuYW1lOiAnRWRpdExpc3QnLAogICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9vdGhlci9UYWJsZUlubmVyRWRpdExpc3QnKSwKICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WGheiBlOe8lui+keihqOagvCcsIGtlZXBBbGl2ZTogdHJ1ZSB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBwYXRoOiAnL290aGVyL2xpc3QvdXNlci1saXN0JywKICAgICAgICAgICAgbmFtZTogJ1VzZXJMaXN0JywKICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3Mvb3RoZXIvVXNlckxpc3QnKSwKICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+eUqOaIt+WIl+ihqCcsIGtlZXBBbGl2ZTogdHJ1ZSB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBwYXRoOiAnL290aGVyL2xpc3Qvcm9sZS1saXN0JywKICAgICAgICAgICAgbmFtZTogJ1JvbGVMaXN0JywKICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3Mvb3RoZXIvUm9sZUxpc3QnKSwKICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+inkuiJsuWIl+ihqCcsIGtlZXBBbGl2ZTogdHJ1ZSB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBwYXRoOiAnL290aGVyL2xpc3Qvc3lzdGVtLXJvbGUnLAogICAgICAgICAgICBuYW1lOiAnU3lzdGVtUm9sZScsCiAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL3JvbGUvUm9sZUxpc3QnKSwKICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+inkuiJsuWIl+ihqDInLCBrZWVwQWxpdmU6IHRydWUgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgcGF0aDogJy9vdGhlci9saXN0L3Blcm1pc3Npb24tbGlzdCcsCiAgICAgICAgICAgIG5hbWU6ICdQZXJtaXNzaW9uTGlzdCcsCiAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL290aGVyL1Blcm1pc3Npb25MaXN0JyksCiAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmnYPpmZDliJfooagnLCBrZWVwQWxpdmU6IHRydWUgfQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgXQogIH0KICAqLwogIF0KfSwgewogIHBhdGg6ICcqJywKICByZWRpcmVjdDogJy80MDMnLAogIGhpZGRlbjogdHJ1ZQp9XTsKLyoqCiAqIOWfuuehgOi3r+eUsQogKiBAdHlwZSB7ICpbXSB9CiAqLwoKZXhwb3J0IHZhciBjb25zdGFudFJvdXRlck1hcCA9IFsvL3sgcGF0aDogJy9sb2dpbicsIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2xvZ2luL2luZGV4JyksIGhpZGRlbjogdHJ1ZSB9LAp7CiAgcGF0aDogJy91c2VyJywKICBjb21wb25lbnQ6IFVzZXJMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvdXNlci9sb2dpbicsCiAgaGlkZGVuOiB0cnVlLAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJ2xvZ2luJywKICAgIG5hbWU6ICdsb2dpbicsCiAgICAvL2NvbXBvbmVudDogKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6ICJ1c2VyIiAqLyAnQC92aWV3cy91c2VyL0xvZ2luJykKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gaW1wb3J0KAogICAgICAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAidXNlciIgKi8KICAgICAgJ0Avdmlld3MvbG9naW4vaW5kZXgnKTsKICAgIH0KICB9LCB7CiAgICBwYXRoOiAncmVnaXN0ZXInLAogICAgbmFtZTogJ3JlZ2lzdGVyJywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gaW1wb3J0KAogICAgICAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAidXNlciIgKi8KICAgICAgJ0Avdmlld3MvdXNlci9SZWdpc3RlcicpOwogICAgfQogIH0sIHsKICAgIHBhdGg6ICdyZWdpc3Rlci1yZXN1bHQnLAogICAgbmFtZTogJ3JlZ2lzdGVyUmVzdWx0JywKICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICByZXR1cm4gaW1wb3J0KAogICAgICAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAidXNlciIgKi8KICAgICAgJ0Avdmlld3MvdXNlci9SZWdpc3RlclJlc3VsdCcpOwogICAgfQogIH0sIHsKICAgIHBhdGg6ICdyZWNvdmVyJywKICAgIG5hbWU6ICdyZWNvdmVyJywKICAgIGNvbXBvbmVudDogdW5kZWZpbmVkCiAgfV0KfSwgewogIHBhdGg6ICcvNDAzJywKICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgIHJldHVybiBpbXBvcnQoCiAgICAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAiZmFpbCIgKi8KICAgICdAL3ZpZXdzL2V4Y2VwdGlvbi80MDMnKTsKICB9Cn1dOw=="},null]}