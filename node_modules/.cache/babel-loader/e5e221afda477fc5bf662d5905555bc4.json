{"remainingRequest":"/Users/momo/vue/live-data-analysis-static/node_modules/thread-loader/dist/cjs.js!/Users/momo/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js!/Users/momo/vue/live-data-analysis-static/src/config/router.config.js","dependencies":[{"path":"/Users/momo/vue/live-data-analysis-static/src/config/router.config.js","mtime":1645155341582},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":1626939577620},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/thread-loader/dist/cjs.js","mtime":1626939577640},{"path":"/Users/momo/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js","mtime":1640003217818}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQppbXBvcnQgeyBVc2VyTGF5b3V0LCBCYXNpY0xheW91dCwgQmxhbmtMYXlvdXQgfSBmcm9tICdAL2xheW91dHMnOwppbXBvcnQgeyBieEFuYWFseXNlIH0gZnJvbSAnQC9jb3JlL2ljb25zJzsKdmFyIFJvdXRlVmlldyA9IHsKICBuYW1lOiAnUm91dGVWaWV3JywKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7CiAgICByZXR1cm4gaCgncm91dGVyLXZpZXcnKTsKICB9Cn07CmV4cG9ydCB2YXIgYXN5bmNSb3V0ZXJNYXAgPSBbewogIHBhdGg6ICcvJywKICBuYW1lOiAnaW5kZXgnLAogIGNvbXBvbmVudDogQmFzaWNMYXlvdXQsCiAgbWV0YTogewogICAgdGl0bGU6ICdtZW51LmhvbWUnCiAgfSwKICByZWRpcmVjdDogJy9kYXNoYm9hcmQvYW5hbHlzaXMnLAogIC8vcmVkaXJlY3Q6IG5vcmVkaXJlY3QsCiAgY2hpbGRyZW46IFsvLyBkYXNoYm9hcmQKICB7CiAgICBwYXRoOiAnL2Rhc2hib2FyZCcsCiAgICBuYW1lOiAnZGFzaGJvYXJkJywKICAgIHJlZGlyZWN0OiAnL2Rhc2hib2FyZC9hbmFseXNpcycsCiAgICAvL3JlZGlyZWN0OiBub3JlZGlyZWN0LAogICAgY29tcG9uZW50OiBSb3V0ZVZpZXcsCiAgICBtZXRhOiB7CiAgICAgIHRpdGxlOiAn6I+c5Y2VJywKICAgICAgaWNvbjogYnhBbmFhbHlzZSwKICAgICAgcGVybWlzc2lvbjogWydhbmFseXNpcyddCiAgICB9LAogICAgY2hpbGRyZW46IFt7CiAgICAgIHBhdGg6ICcvZGFzaGJvYXJkL2FuYWx5c2lzJywKICAgICAgbmFtZTogJ0FuYWx5c2lzJywKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9kYXNoYm9hcmQvQnVzaW5lc3NBbmFseXNpcycpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICfkuJrliqEnLAogICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSwKICAgICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC9tZW1iZXInLAogICAgICBuYW1lOiAnTWVtYmVyJywKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9kYXNoYm9hcmQvTWVtYmVyJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJ+S6uuWRmCcsCiAgICAgICAga2VlcEFsaXZlOiB0cnVlLAogICAgICAgIHBlcm1pc3Npb246IFsnbWVtYmVyJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC92aXBvcmRlcicsCiAgICAgIG5hbWU6ICdWaXBPcmRlcicsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvZGFzaGJvYXJkL1ZpcE9yZGVyJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJ+mXrumimOi3n+i/mycsCiAgICAgICAga2VlcEFsaXZlOiB0cnVlLAogICAgICAgIHBlcm1pc3Npb246IFsnYW5hbHlzaXMnXQogICAgICB9CiAgICB9LCB7CiAgICAgIHBhdGg6ICcvZGFzaGJvYXJkL3F1YWxpdHlkZXRhaWwnLAogICAgICBuYW1lOiAncXVhbGl0eWRldGFpbCcsCiAgICAgIGhpZGRlbjogdHJ1ZSwKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9kYXNoYm9hcmQvUXVhbGl0eURldGFpbCcpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICfotKjph4/or6bnu4bmlbDmja4nLAogICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSwKICAgICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC9wcm9qZWN0ZGV0YWlsJywKICAgICAgbmFtZTogJ3Byb2plY3RkZXRhaWwnLAogICAgICBoaWRkZW46IHRydWUsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvZGFzaGJvYXJkL1Byb2plY3REZXRhaWwnKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAn5Lia5Yqh6K+m57uG5pWw5o2uJywKICAgICAgICBrZWVwQWxpdmU6IHRydWUsCiAgICAgICAgcGVybWlzc2lvbjogWydhbmFseXNpcyddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9kYXNoYm9hcmQvcWFkYXRhJywKICAgICAgbmFtZTogJ3FhZGF0YScsCiAgICAgIC8vIGhpZGRlbjogdHJ1ZSwKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9xYWRhdGEvcWFkYXRhJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJ+WVhuS4mlFB5pWw5o2u57uf6K6hJywKICAgICAgICBrZWVwQWxpdmU6IHRydWUsCiAgICAgICAgcGVybWlzc2lvbjogWydhbmFseXNpcyddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9kYXNoYm9hcmQvcWFtZW1iZXJkYXRhJywKICAgICAgbmFtZTogJ3FhbWVtYmVyZGF0YScsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvcWFkYXRhL3FhbWVtYmVyZGF0YScpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICfllYbkuJpRQeaOkuacn+aDheWGtScsCiAgICAgICAga2VlcEFsaXZlOiB0cnVlLAogICAgICAgIHBlcm1pc3Npb246IFsnYW5hbHlzaXMnXQogICAgICB9CiAgICB9LCB7CiAgICAgIHBhdGg6ICcvZGFzaGJvYXJkL3FhbWVtYmVyJywKICAgICAgbmFtZTogJ3FhbWVtYmVyJywKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgnQC92aWV3cy9xYWRhdGEvcWFtZW1iZXInKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAn5ZWG5LiaUUHkurrlkZjphY3nva4nLAogICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSwKICAgICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgICAgfQogICAgfSwgewogICAgICBwYXRoOiAnL2Rhc2hib2FyZC9jb2RlbnVtYmVyJywKICAgICAgbmFtZTogJ2NvZGVudW1iZXInLAogICAgICBoaWRkZW46IHRydWUsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoJ0Avdmlld3MvcWFkYXRhL2NvZGVudW1iZXInKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAn5Luj56CB6YeP57uf6K6hJywKICAgICAgICBrZWVwQWxpdmU6IHRydWUsCiAgICAgICAgcGVybWlzc2lvbjogWydhbmFseXNpcyddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9kYXNoYm9hcmQvdGVzdDAwMScsCiAgICAgIG5hbWU6ICd0ZXN0MDAxJywKICAgICAgaGlkZGVuOiB0cnVlLAogICAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgICByZXR1cm4gaW1wb3J0KCdAL3ZpZXdzL3FhZGF0YS90ZXN0MDAxJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJ3Rlc3QwMDEnLAogICAgICAgIGtlZXBBbGl2ZTogdHJ1ZSwKICAgICAgICBwZXJtaXNzaW9uOiBbJ2FuYWx5c2lzJ10KICAgICAgfQogICAgfV0KICB9LCAvLyBmb3JtcwoKICAvKiAgICAgICB7CiAgICAgICAgICBwYXRoOiAnL2Zvcm0nLAogICAgICAgICAgcmVkaXJlY3Q6ICcvZm9ybS9iYXNlLWZvcm0nLAogICAgICAgICAgY29tcG9uZW50OiBSb3V0ZVZpZXcsCiAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn6KGo5Y2V6aG1JywgaWNvbjogJ2Zvcm0nLCBwZXJtaXNzaW9uOiBbICdmb3JtJyBdIH0sCiAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9mb3JtL2Jhc2UtZm9ybScsCiAgICAgICAgICAgICAgbmFtZTogJ0Jhc2VGb3JtJywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9mb3JtL2Jhc2ljRm9ybScpLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfln7rnoYDooajljZUnLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ2Zvcm0nIF0gfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9mb3JtL3N0ZXAtZm9ybScsCiAgICAgICAgICAgICAgbmFtZTogJ1N0ZXBGb3JtJywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9mb3JtL3N0ZXBGb3JtL1N0ZXBGb3JtJyksCiAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WIhuatpeihqOWNlScsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAnZm9ybScgXSB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2Zvcm0vYWR2YW5jZWQtZm9ybScsCiAgICAgICAgICAgICAgbmFtZTogJ0FkdmFuY2VGb3JtJywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9mb3JtL2FkdmFuY2VkRm9ybS9BZHZhbmNlZEZvcm0nKSwKICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn6auY57qn6KGo5Y2VJywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICdmb3JtJyBdIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sICovCiAgLy8gbGlzdAoKICAvKiAgICAgICB7CiAgICAgICAgICBwYXRoOiAnL2xpc3QnLAogICAgICAgICAgbmFtZTogJ2xpc3QnLAogICAgICAgICAgY29tcG9uZW50OiBSb3V0ZVZpZXcsCiAgICAgICAgICByZWRpcmVjdDogJy9saXN0L3RhYmxlLWxpc3QnLAogICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WIl+ihqOmhtScsIGljb246ICd0YWJsZScsIHBlcm1pc3Npb246IFsgJ3RhYmxlJyBdIH0sCiAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9saXN0L3RhYmxlLWxpc3QvOnBhZ2VObyhbMS05XVxcZCopPycsCiAgICAgICAgICAgICAgbmFtZTogJ1RhYmxlTGlzdFdyYXBwZXInLAogICAgICAgICAgICAgIGhpZGVDaGlsZHJlbkluTWVudTogdHJ1ZSwgLy8g5by65Yi25pi+56S6IE1lbnVJdGVtIOiAjOS4jeaYryBTdWJNZW51CiAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvbGlzdC9UYWJsZUxpc3QnKSwKICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5p+l6K+i6KGo5qC8Jywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd0YWJsZScgXSB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2xpc3QvYmFzaWMtbGlzdCcsCiAgICAgICAgICAgICAgbmFtZTogJ0Jhc2ljTGlzdCcsCiAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvbGlzdC9CYXNpY0xpc3QnKSwKICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5qCH5YeG5YiX6KGoJywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd0YWJsZScgXSB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL2xpc3QvY2FyZCcsCiAgICAgICAgICAgICAgbmFtZTogJ0NhcmRMaXN0JywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9saXN0L0NhcmRMaXN0JyksCiAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+WNoeeJh+WIl+ihqCcsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAndGFibGUnIF0gfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9saXN0L3NlYXJjaCcsCiAgICAgICAgICAgICAgbmFtZTogJ1NlYXJjaExpc3QnLAogICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2xpc3Qvc2VhcmNoL1NlYXJjaExheW91dCcpLAogICAgICAgICAgICAgIHJlZGlyZWN0OiAnL2xpc3Qvc2VhcmNoL2FydGljbGUnLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmkJzntKLliJfooagnLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ3RhYmxlJyBdIH0sCiAgICAgICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcGF0aDogJy9saXN0L3NlYXJjaC9hcnRpY2xlJywKICAgICAgICAgICAgICAgICAgbmFtZTogJ1NlYXJjaEFydGljbGVzJywKICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJy4uL3ZpZXdzL2xpc3Qvc2VhcmNoL0FydGljbGUnKSwKICAgICAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+aQnOe0ouWIl+ihqO+8iOaWh+eroO+8iScsIHBlcm1pc3Npb246IFsgJ3RhYmxlJyBdIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHBhdGg6ICcvbGlzdC9zZWFyY2gvcHJvamVjdCcsCiAgICAgICAgICAgICAgICAgIG5hbWU6ICdTZWFyY2hQcm9qZWN0cycsCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCcuLi92aWV3cy9saXN0L3NlYXJjaC9Qcm9qZWN0cycpLAogICAgICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5pCc57Si5YiX6KGo77yI6aG555uu77yJJywgcGVybWlzc2lvbjogWyAndGFibGUnIF0gfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcGF0aDogJy9saXN0L3NlYXJjaC9hcHBsaWNhdGlvbicsCiAgICAgICAgICAgICAgICAgIG5hbWU6ICdTZWFyY2hBcHBsaWNhdGlvbnMnLAogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnLi4vdmlld3MvbGlzdC9zZWFyY2gvQXBwbGljYXRpb25zJyksCiAgICAgICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmkJzntKLliJfooajvvIjlupTnlKjvvIknLCBwZXJtaXNzaW9uOiBbICd0YWJsZScgXSB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwgKi8KICAvLyBwcm9maWxlCgogIC8qICAgICAgIHsKICAgICAgICAgIHBhdGg6ICcvcHJvZmlsZScsCiAgICAgICAgICBuYW1lOiAncHJvZmlsZScsCiAgICAgICAgICBjb21wb25lbnQ6IFJvdXRlVmlldywKICAgICAgICAgIHJlZGlyZWN0OiAnL3Byb2ZpbGUvYmFzaWMnLAogICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+ivpuaDhemhtScsIGljb246ICdwcm9maWxlJywgcGVybWlzc2lvbjogWyAncHJvZmlsZScgXSB9LAogICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvcHJvZmlsZS9iYXNpYycsCiAgICAgICAgICAgICAgbmFtZTogJ1Byb2ZpbGVCYXNpYycsCiAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvcHJvZmlsZS9iYXNpYycpLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfln7rnoYDor6bmg4XpobUnLCBwZXJtaXNzaW9uOiBbICdwcm9maWxlJyBdIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvcHJvZmlsZS9hZHZhbmNlZCcsCiAgICAgICAgICAgICAgbmFtZTogJ1Byb2ZpbGVBZHZhbmNlZCcsCiAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvcHJvZmlsZS9hZHZhbmNlZC9BZHZhbmNlZCcpLAogICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfpq5jnuqfor6bmg4XpobUnLCBwZXJtaXNzaW9uOiBbICdwcm9maWxlJyBdIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sCiAgCiAgICAgICAgLy8gcmVzdWx0CiAgLyogICAgICAgewogICAgICAgICAgcGF0aDogJy9yZXN1bHQnLAogICAgICAgICAgbmFtZTogJ3Jlc3VsdCcsCiAgICAgICAgICBjb21wb25lbnQ6IFJvdXRlVmlldywKICAgICAgICAgIHJlZGlyZWN0OiAnL3Jlc3VsdC9zdWNjZXNzJywKICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfnu5PmnpzpobUnLCBpY29uOiAnY2hlY2stY2lyY2xlLW8nLCBwZXJtaXNzaW9uOiBbICdyZXN1bHQnIF0gfSwKICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYXRoOiAnL3Jlc3VsdC9zdWNjZXNzJywKICAgICAgICAgICAgICBuYW1lOiAnUmVzdWx0U3VjY2VzcycsICovCiAgLy8gICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAicmVzdWx0IiAqLyAnQC92aWV3cy9yZXN1bHQvU3VjY2VzcycpLAoKICAvKiAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5oiQ5YqfJywga2VlcEFsaXZlOiBmYWxzZSwgaGlkZGVuSGVhZGVyQ29udGVudDogdHJ1ZSwgcGVybWlzc2lvbjogWyAncmVzdWx0JyBdIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvcmVzdWx0L2ZhaWwnLAogICAgICAgICAgICAgIG5hbWU6ICdSZXN1bHRGYWlsJywgKi8KICAvLyAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6ICJyZXN1bHQiICovICdAL3ZpZXdzL3Jlc3VsdC9FcnJvcicpLAoKICAvKiAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5aSx6LSlJywga2VlcEFsaXZlOiBmYWxzZSwgaGlkZGVuSGVhZGVyQ29udGVudDogdHJ1ZSwgcGVybWlzc2lvbjogWyAncmVzdWx0JyBdIH0KICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0sICovCiAgLy8gRXhjZXB0aW9uCiAgewogICAgcGF0aDogJy9leGNlcHRpb24nLAogICAgbmFtZTogJ2V4Y2VwdGlvbicsCiAgICBjb21wb25lbnQ6IFJvdXRlVmlldywKICAgIHJlZGlyZWN0OiAnL2V4Y2VwdGlvbi80MDMnLAogICAgbWV0YTogewogICAgICB0aXRsZTogJ+W8guW4uOmhtScsCiAgICAgIGljb246ICd3YXJuaW5nJywKICAgICAgcGVybWlzc2lvbjogWydleGNlcHRpb24nXQogICAgfSwKICAgIGNoaWxkcmVuOiBbewogICAgICBwYXRoOiAnL2V4Y2VwdGlvbi80MDMnLAogICAgICBuYW1lOiAnRXhjZXB0aW9uNDAzJywKICAgICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgICAgcmV0dXJuIGltcG9ydCgKICAgICAgICAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAiZmFpbCIgKi8KICAgICAgICAnQC92aWV3cy9leGNlcHRpb24vNDAzJyk7CiAgICAgIH0sCiAgICAgIG1ldGE6IHsKICAgICAgICB0aXRsZTogJzQwMycsCiAgICAgICAgcGVybWlzc2lvbjogWydleGNlcHRpb24nXQogICAgICB9CiAgICB9LCB7CiAgICAgIHBhdGg6ICcvZXhjZXB0aW9uLzQwNCcsCiAgICAgIG5hbWU6ICdFeGNlcHRpb240MDQnLAogICAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgICByZXR1cm4gaW1wb3J0KAogICAgICAgIC8qIHdlYnBhY2tDaHVua05hbWU6ICJmYWlsIiAqLwogICAgICAgICdAL3ZpZXdzL2V4Y2VwdGlvbi80MDQnKTsKICAgICAgfSwKICAgICAgbWV0YTogewogICAgICAgIHRpdGxlOiAnNDA0JywKICAgICAgICBwZXJtaXNzaW9uOiBbJ2V4Y2VwdGlvbiddCiAgICAgIH0KICAgIH0sIHsKICAgICAgcGF0aDogJy9leGNlcHRpb24vNTAwJywKICAgICAgbmFtZTogJ0V4Y2VwdGlvbjUwMCcsCiAgICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgICAgIHJldHVybiBpbXBvcnQoCiAgICAgICAgLyogd2VicGFja0NodW5rTmFtZTogImZhaWwiICovCiAgICAgICAgJ0Avdmlld3MvZXhjZXB0aW9uLzUwMCcpOwogICAgICB9LAogICAgICBtZXRhOiB7CiAgICAgICAgdGl0bGU6ICc1MDAnLAogICAgICAgIHBlcm1pc3Npb246IFsnZXhjZXB0aW9uJ10KICAgICAgfQogICAgfV0KICB9IC8vIGFjY291bnQKCiAgLyogICAgICAgewogICAgICAgICAgcGF0aDogJy9hY2NvdW50JywKICAgICAgICAgIGNvbXBvbmVudDogUm91dGVWaWV3LAogICAgICAgICAgcmVkaXJlY3Q6ICcvYWNjb3VudC9jZW50ZXInLAogICAgICAgICAgbmFtZTogJ2FjY291bnQnLAogICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+S4quS6uumhtScsIGljb246ICd1c2VyJywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd1c2VyJyBdIH0sCiAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcGF0aDogJy9hY2NvdW50L2NlbnRlcicsCiAgICAgICAgICAgICAgbmFtZTogJ2NlbnRlcicsCiAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvYWNjb3VudC9jZW50ZXInKSwKICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5Liq5Lq65Lit5b+DJywga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd1c2VyJyBdIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhdGg6ICcvYWNjb3VudC9zZXR0aW5ncycsCiAgICAgICAgICAgICAgbmFtZTogJ3NldHRpbmdzJywKICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9hY2NvdW50L3NldHRpbmdzL0luZGV4JyksCiAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+S4quS6uuiuvue9ricsIGhpZGVIZWFkZXI6IHRydWUsIHBlcm1pc3Npb246IFsgJ3VzZXInIF0gfSwKICAgICAgICAgICAgICByZWRpcmVjdDogJy9hY2NvdW50L3NldHRpbmdzL2Jhc2UnLAogICAgICAgICAgICAgIGhpZGVDaGlsZHJlbkluTWVudTogdHJ1ZSwKICAgICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBwYXRoOiAnL2FjY291bnQvc2V0dGluZ3MvYmFzZScsCiAgICAgICAgICAgICAgICAgIG5hbWU6ICdCYXNlU2V0dGluZ3MnLAogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9hY2NvdW50L3NldHRpbmdzL0Jhc2VTZXR0aW5nJyksCiAgICAgICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfln7rmnKzorr7nva4nLCBoaWRkZW46IHRydWUsIHBlcm1pc3Npb246IFsgJ3VzZXInIF0gfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcGF0aDogJy9hY2NvdW50L3NldHRpbmdzL3NlY3VyaXR5JywKICAgICAgICAgICAgICAgICAgbmFtZTogJ1NlY3VyaXR5U2V0dGluZ3MnLAogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9hY2NvdW50L3NldHRpbmdzL1NlY3VyaXR5JyksCiAgICAgICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICflronlhajorr7nva4nLCBoaWRkZW46IHRydWUsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAndXNlcicgXSB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBwYXRoOiAnL2FjY291bnQvc2V0dGluZ3MvY3VzdG9tJywKICAgICAgICAgICAgICAgICAgbmFtZTogJ0N1c3RvbVNldHRpbmdzJywKICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvYWNjb3VudC9zZXR0aW5ncy9DdXN0b20nKSwKICAgICAgICAgICAgICAgICAgbWV0YTogeyB0aXRsZTogJ+S4quaAp+WMluiuvue9ricsIGhpZGRlbjogdHJ1ZSwga2VlcEFsaXZlOiB0cnVlLCBwZXJtaXNzaW9uOiBbICd1c2VyJyBdIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHBhdGg6ICcvYWNjb3VudC9zZXR0aW5ncy9iaW5kaW5nJywKICAgICAgICAgICAgICAgICAgbmFtZTogJ0JpbmRpbmdTZXR0aW5ncycsCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2FjY291bnQvc2V0dGluZ3MvQmluZGluZycpLAogICAgICAgICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn6LSm5oi357uR5a6aJywgaGlkZGVuOiB0cnVlLCBrZWVwQWxpdmU6IHRydWUsIHBlcm1pc3Npb246IFsgJ3VzZXInIF0gfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgcGF0aDogJy9hY2NvdW50L3NldHRpbmdzL25vdGlmaWNhdGlvbicsCiAgICAgICAgICAgICAgICAgIG5hbWU6ICdOb3RpZmljYXRpb25TZXR0aW5ncycsCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2FjY291bnQvc2V0dGluZ3MvTm90aWZpY2F0aW9uJyksCiAgICAgICAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfmlrDmtojmga/pgJrnn6UnLCBoaWRkZW46IHRydWUsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAndXNlcicgXSB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSAqLwogIC8vIG90aGVyCgogIC8qCiAgewogICAgcGF0aDogJy9vdGhlcicsCiAgICBuYW1lOiAnb3RoZXJQYWdlJywKICAgIGNvbXBvbmVudDogUGFnZVZpZXcsCiAgICBtZXRhOiB7IHRpdGxlOiAn5YW25LuW57uE5Lu2JywgaWNvbjogJ3NsYWNrJywgcGVybWlzc2lvbjogWyAnZGFzaGJvYXJkJyBdIH0sCiAgICByZWRpcmVjdDogJy9vdGhlci9pY29uLXNlbGVjdG9yJywKICAgIGNoaWxkcmVuOiBbCiAgICAgIHsKICAgICAgICBwYXRoOiAnL290aGVyL2ljb24tc2VsZWN0b3InLAogICAgICAgIG5hbWU6ICdUZXN0SWNvblNlbGVjdCcsCiAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3Mvb3RoZXIvSWNvblNlbGVjdG9yVmlldycpLAogICAgICAgIG1ldGE6IHsgdGl0bGU6ICdJY29uU2VsZWN0b3InLCBpY29uOiAndG9vbCcsIGtlZXBBbGl2ZTogdHJ1ZSwgcGVybWlzc2lvbjogWyAnZGFzaGJvYXJkJyBdIH0KICAgICAgfSwKICAgICAgewogICAgICAgIHBhdGg6ICcvb3RoZXIvbGlzdCcsCiAgICAgICAgY29tcG9uZW50OiBSb3V0ZVZpZXcsCiAgICAgICAgbWV0YTogeyB0aXRsZTogJ+S4muWKoeW4g+WxgCcsIGljb246ICdsYXlvdXQnLCBwZXJtaXNzaW9uOiBbICdzdXBwb3J0JyBdIH0sCiAgICAgICAgcmVkaXJlY3Q6ICcvb3RoZXIvbGlzdC90cmVlLWxpc3QnLAogICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIHBhdGg6ICcvb3RoZXIvbGlzdC90cmVlLWxpc3QnLAogICAgICAgICAgICBuYW1lOiAnVHJlZUxpc3QnLAogICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9vdGhlci9UcmVlTGlzdCcpLAogICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5qCR55uu5b2V6KGo5qC8Jywga2VlcEFsaXZlOiB0cnVlIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIHBhdGg6ICcvb3RoZXIvbGlzdC9lZGl0LXRhYmxlJywKICAgICAgICAgICAgbmFtZTogJ0VkaXRMaXN0JywKICAgICAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3Mvb3RoZXIvVGFibGVJbm5lckVkaXRMaXN0JyksCiAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICflhoXogZTnvJbovpHooajmoLwnLCBrZWVwQWxpdmU6IHRydWUgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgcGF0aDogJy9vdGhlci9saXN0L3VzZXItbGlzdCcsCiAgICAgICAgICAgIG5hbWU6ICdVc2VyTGlzdCcsCiAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL290aGVyL1VzZXJMaXN0JyksCiAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfnlKjmiLfliJfooagnLCBrZWVwQWxpdmU6IHRydWUgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgcGF0aDogJy9vdGhlci9saXN0L3JvbGUtbGlzdCcsCiAgICAgICAgICAgIG5hbWU6ICdSb2xlTGlzdCcsCiAgICAgICAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL290aGVyL1JvbGVMaXN0JyksCiAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfop5LoibLliJfooagnLCBrZWVwQWxpdmU6IHRydWUgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgcGF0aDogJy9vdGhlci9saXN0L3N5c3RlbS1yb2xlJywKICAgICAgICAgICAgbmFtZTogJ1N5c3RlbVJvbGUnLAogICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9yb2xlL1JvbGVMaXN0JyksCiAgICAgICAgICAgIG1ldGE6IHsgdGl0bGU6ICfop5LoibLliJfooagyJywga2VlcEFsaXZlOiB0cnVlIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIHBhdGg6ICcvb3RoZXIvbGlzdC9wZXJtaXNzaW9uLWxpc3QnLAogICAgICAgICAgICBuYW1lOiAnUGVybWlzc2lvbkxpc3QnLAogICAgICAgICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9vdGhlci9QZXJtaXNzaW9uTGlzdCcpLAogICAgICAgICAgICBtZXRhOiB7IHRpdGxlOiAn5p2D6ZmQ5YiX6KGoJywga2VlcEFsaXZlOiB0cnVlIH0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIF0KICB9CiAgKi8KICBdCn0sIHsKICBwYXRoOiAnKicsCiAgcmVkaXJlY3Q6ICcvNDAzJywKICBoaWRkZW46IHRydWUKfV07Ci8qKgogKiDln7rnoYDot6/nlLEKICogQHR5cGUgeyAqW10gfQogKi8KCmV4cG9ydCB2YXIgY29uc3RhbnRSb3V0ZXJNYXAgPSBbLy97IHBhdGg6ICcvbG9naW4nLCBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9sb2dpbi9pbmRleCcpLCBoaWRkZW46IHRydWUgfSwKewogIHBhdGg6ICcvdXNlcicsCiAgY29tcG9uZW50OiBVc2VyTGF5b3V0LAogIHJlZGlyZWN0OiAnL3VzZXIvbG9naW4nLAogIGhpZGRlbjogdHJ1ZSwKICBjaGlsZHJlbjogW3sKICAgIHBhdGg6ICdsb2dpbicsCiAgICBuYW1lOiAnbG9naW4nLAogICAgLy9jb21wb25lbnQ6ICgpID0+IGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiAidXNlciIgKi8gJ0Avdmlld3MvdXNlci9Mb2dpbicpCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgKICAgICAgLyogd2VicGFja0NodW5rTmFtZTogInVzZXIiICovCiAgICAgICdAL3ZpZXdzL2xvZ2luL2luZGV4Jyk7CiAgICB9CiAgfSwgewogICAgcGF0aDogJ3JlZ2lzdGVyJywKICAgIG5hbWU6ICdyZWdpc3RlcicsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgKICAgICAgLyogd2VicGFja0NodW5rTmFtZTogInVzZXIiICovCiAgICAgICdAL3ZpZXdzL3VzZXIvUmVnaXN0ZXInKTsKICAgIH0KICB9LCB7CiAgICBwYXRoOiAncmVnaXN0ZXItcmVzdWx0JywKICAgIG5hbWU6ICdyZWdpc3RlclJlc3VsdCcsCiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgICAgcmV0dXJuIGltcG9ydCgKICAgICAgLyogd2VicGFja0NodW5rTmFtZTogInVzZXIiICovCiAgICAgICdAL3ZpZXdzL3VzZXIvUmVnaXN0ZXJSZXN1bHQnKTsKICAgIH0KICB9LCB7CiAgICBwYXRoOiAncmVjb3ZlcicsCiAgICBuYW1lOiAncmVjb3ZlcicsCiAgICBjb21wb25lbnQ6IHVuZGVmaW5lZAogIH1dCn0sIHsKICBwYXRoOiAnLzQwMycsCiAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICByZXR1cm4gaW1wb3J0KAogICAgLyogd2VicGFja0NodW5rTmFtZTogImZhaWwiICovCiAgICAnQC92aWV3cy9leGNlcHRpb24vNDAzJyk7CiAgfQp9XTs="},null]}