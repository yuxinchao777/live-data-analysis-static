{"remainingRequest":"/Users/momo/code/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js!/Users/momo/code/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/momo/code/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/momo/code/vue/live-data-analysis-static/src/components/Ellipsis/Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/momo/code/vue/live-data-analysis-static/src/components/Ellipsis/Ellipsis.vue","mtime":1626864386000},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":1647586199048},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/babel-loader/lib/index.js","mtime":1647848746451},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/cache-loader/dist/cjs.js","mtime":1647586199048},{"path":"/Users/momo/code/vue/live-data-analysis-static/node_modules/vue-loader/lib/index.js","mtime":1647848754116}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCBUb29sdGlwIGZyb20gJ2FudC1kZXNpZ24tdnVlL2VzL3Rvb2x0aXAnOwppbXBvcnQgeyBjdXRTdHJCeUZ1bGxMZW5ndGgsIGdldFN0ckZ1bGxMZW5ndGggfSBmcm9tICdAL2NvbXBvbmVudHMvX3V0aWwvdXRpbCc7Ci8qCiAgICBjb25zdCBpc1N1cHBvcnRMaW5lQ2xhbXAgPSBkb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdExpbmVDbGFtcCAhPT0gdW5kZWZpbmVkOwoKICAgIGNvbnN0IFRvb2x0aXBPdmVybGF5U3R5bGUgPSB7CiAgICAgIG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnLAogICAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnLAogICAgfTsKICAqLwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdFbGxpcHNpcycsCiAgY29tcG9uZW50czogewogICAgVG9vbHRpcDogVG9vbHRpcAogIH0sCiAgcHJvcHM6IHsKICAgIHByZWZpeENsczogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdhbnQtcHJvLWVsbGlwc2lzJwogICAgfSwKICAgIHRvb2x0aXA6IHsKICAgICAgdHlwZTogQm9vbGVhbgogICAgfSwKICAgIGxlbmd0aDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgbGluZXM6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxCiAgICB9LAogICAgZnVsbFdpZHRoUmVjb2duaXRpb246IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGdldFN0ckRvbTogZnVuY3Rpb24gZ2V0U3RyRG9tKHN0ciwgZnVsbExlbmd0aCkgewogICAgICB2YXIgaCA9IHRoaXMuJGNyZWF0ZUVsZW1lbnQ7CiAgICAgIHJldHVybiBoKCJzcGFuIiwgW2N1dFN0ckJ5RnVsbExlbmd0aChzdHIsIHRoaXMubGVuZ3RoKSArIChmdWxsTGVuZ3RoID4gdGhpcy5sZW5ndGggPyAnLi4uJyA6ICcnKV0pOwogICAgfSwKICAgIGdldFRvb2x0aXA6IGZ1bmN0aW9uIGdldFRvb2x0aXAoZnVsbFN0ciwgZnVsbExlbmd0aCkgewogICAgICB2YXIgaCA9IHRoaXMuJGNyZWF0ZUVsZW1lbnQ7CiAgICAgIHJldHVybiBoKFRvb2x0aXAsIFtoKCJ0ZW1wbGF0ZSIsIHsKICAgICAgICAic2xvdCI6ICJ0aXRsZSIKICAgICAgfSwgW2Z1bGxTdHJdKSwgdGhpcy5nZXRTdHJEb20oZnVsbFN0ciwgZnVsbExlbmd0aCldKTsKICAgIH0KICB9LAogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgdmFyIF90aGlzJCRwcm9wcyA9IHRoaXMuJHByb3BzLAogICAgICAgIHRvb2x0aXAgPSBfdGhpcyQkcHJvcHMudG9vbHRpcCwKICAgICAgICBsZW5ndGggPSBfdGhpcyQkcHJvcHMubGVuZ3RoOwogICAgdmFyIHN0ciA9IHRoaXMuJHNsb3RzLmRlZmF1bHQubWFwKGZ1bmN0aW9uICh2Tm9kZSkgewogICAgICByZXR1cm4gdk5vZGUudGV4dDsKICAgIH0pLmpvaW4oJycpOwogICAgdmFyIGZ1bGxMZW5ndGggPSBnZXRTdHJGdWxsTGVuZ3RoKHN0cik7CiAgICB2YXIgc3RyRG9tID0gdG9vbHRpcCAmJiBmdWxsTGVuZ3RoID4gbGVuZ3RoID8gdGhpcy5nZXRUb29sdGlwKHN0ciwgZnVsbExlbmd0aCkgOiB0aGlzLmdldFN0ckRvbShzdHIsIGZ1bGxMZW5ndGgpOwogICAgcmV0dXJuIHN0ckRvbTsKICB9Cn07"},{"version":3,"sources":["Ellipsis.vue"],"names":[],"mappings":";;;AACA,OAAA,OAAA,MAAA,2BAAA;AACA,SAAA,kBAAA,EAAA,gBAAA,QAAA,yBAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KALA;AAQA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KARA;AAYA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAZA;AAgBA,IAAA,oBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAhBA,GALA;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,GADA,EACA,UADA,EACA;AAAA;AACA,wBACA,kBAAA,CAAA,GAAA,EAAA,KAAA,MAAA,CAAA,IAAA,UAAA,GAAA,KAAA,MAAA,GAAA,KAAA,GAAA,EAAA,CADA;AAGA,KALA;AAMA,IAAA,UANA,sBAMA,OANA,EAMA,UANA,EAMA;AAAA;AACA;AAAA,gBAEA;AAFA,UAEA,OAFA,IAGA,KAAA,SAAA,CAAA,OAAA,EAAA,UAAA,CAHA;AAMA;AAbA,GA1BA;AAyCA,EAAA,MAzCA,oBAyCA;AACA,uBAAA,KAAA,MAAA;AAAA,QAAA,OAAA,gBAAA,OAAA;AAAA,QAAA,MAAA,gBAAA,MAAA;AACA,QAAA,GAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,KAAA;AAAA,aAAA,KAAA,CAAA,IAAA;AAAA,KAAA,EAAA,IAAA,CAAA,EAAA,CAAA;AACA,QAAA,UAAA,GAAA,gBAAA,CAAA,GAAA,CAAA;AACA,QAAA,MAAA,GAAA,OAAA,IAAA,UAAA,GAAA,MAAA,GAAA,KAAA,UAAA,CAAA,GAAA,EAAA,UAAA,CAAA,GAAA,KAAA,SAAA,CAAA,GAAA,EAAA,UAAA,CAAA;AACA,WACA,MADA;AAGA;AAjDA,CAAA","sourcesContent":["<script>\nimport Tooltip from 'ant-design-vue/es/tooltip'\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util'\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom (str, fullLength) {\n      return (\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\n      )\n    },\n    getTooltip (fullStr, fullLength) {\n      return (\n        <Tooltip>\n          <template slot=\"title\">{ fullStr }</template>\n          { this.getStrDom(fullStr, fullLength) }\n        </Tooltip>\n      )\n    }\n  },\n  render () {\n    const { tooltip, length } = this.$props\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\n    const fullLength = getStrFullLength(str)\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\n    return (\n      strDom\n    )\n  }\n}\n</script>\n"],"sourceRoot":"src/components/Ellipsis"}]}